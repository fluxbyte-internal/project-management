generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRoleEnum {
  ADMINISTRATOR
  PROJECT_MANAGER
  TEAM_MEMBER
  SUPER_ADMIN
  OPERATOR
}

enum UserStatusEnum {
  ACTIVE
  INACTIVE
}

enum ProjectStatusEnum {
  NOT_STARTED
  ACTIVE
  ON_HOLD
  CLOSED
}

enum ProjectDefaultViewEnum {
  KANBAN
  GANTT
  CALENDAR
  LIST
}

enum TaskStatusEnum {
  NOT_STARTED
  COMPLETED
}

enum TaskDependenciesEnum {
  BLOCKING
  WAITING_ON
}

model User {
  userId    String         @id @default(uuid()) @map("user_id")
  email     String         @unique @map("email")
  password  String         @map("password")
  status    UserStatusEnum @map("status")
  firstName String?        @map("first_name")
  lastName  String?        @map("last_name")
  timezone  String?        @map("time_zone")
  country   String?        @map("country")
  avatarImg String?        @map("avatar_img")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")

  comment          Comments[]
  task             Task[]
  userOrganisation UserOrganisation[]

  createdOrganisations Organisation[] @relation("createdByUser")
  updatedOrganisations Organisation[] @relation("updatedByUser")

  createdProject Project[] @relation("createdByUser")
  updatedProject Project[] @relation("updatedByUser")

  createdTask Task[] @relation("createdByUser")
  updatedTask Task[] @relation("updatedByUser")

  @@unique([email, password])
  @@index([userId, email])
}

model Organisation {
  organisationId   String   @id @default(uuid()) @map("organisation_id")
  organisationName String   @map("organisation_name")
  industry         String   @map("industry")
  status           String   @map("status")
  country          String   @map("country")
  nonWorkingDays   Json     @map("non_working_days")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  tenantId         String?  @map("tenant_id")
  createdByUserId  String   @map("created_by_user_id")
  createdByUser    User     @relation("createdByUser", fields: [createdByUserId], references: [userId])
  updatedByUserId  String?  @map("updated_by_user_id")
  updatedByUser    User?    @relation("updatedByUser", fields: [updatedByUserId], references: [userId])

  projects         Project[]
  userOrganisation UserOrganisation[]

  @@unique([organisationName, industry, createdByUserId])
  @@index([organisationId, tenantId])
}

model Tenant {
  tenantId         String   @id @default(uuid()) @map("tenant_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  connectionString String?  @map("connection_string")

  @@index([tenantId])
}

model UserOrganisation {
  userOrganisationId String       @id @default(uuid()) @map("user_organisation_id")
  userId             String       @map("user_id")
  organisationId     String       @map("organisation_id")
  role               UserRoleEnum @map("role")
  jobTitle           String?      @map("job_title")
  taskColour         String?      @map("task_colour")
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")

  organisation Organisation? @relation(fields: [organisationId], references: [organisationId])
  user         User?         @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, organisationId])
  @@index([userId, organisationId, role])
}

model Project {
  projectId             String                 @id @unique @default(uuid()) @map("project_id")
  organisationId        String                 @map("organisation_id")
  organisation          Organisation           @relation(fields: [organisationId], references: [organisationId])
  projectName           String                 @map("project_name")
  projectDescription    String                 @map("project_description")
  startDate             DateTime               @map("start_date")
  estimatedEndDate      DateTime               @map("estimated_end_date")
  status                ProjectStatusEnum      @default(NOT_STARTED) @map("status")
  defaultView           ProjectDefaultViewEnum @default(LIST) @map("default_view")
  timeTrack             String?                @map("time_track")
  budgetTrack           String?                @map("budget_track")
  estimatedBudget       String                 @map("estimated_budget")
  actualCost            String?                @map("actual_cost")
  progressionPercentage String?                @map("progression_percentage")
  createdByUserId       String                 @map("created_by_user_id")
  createdByUser         User                   @relation("createdByUser", fields: [createdByUserId], references: [userId])
  updatedByUserId       String?                @map("updated_by_user_id")
  updatedByUser         User?                  @relation("updatedByUser", fields: [updatedByUserId], references: [userId])
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")

  tasks Task[]

  @@index([projectId, organisationId])
}

model Task {
  taskId              String               @id @default(uuid()) @map("task_id")
  projectId           String               @map("project_id")
  project             Project              @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  taskName            String               @map("task_name")
  taskDescription     String?              @map("task_description")
  startDate           DateTime             @map("start_date")
  duration            Int                  @map("duration")
  completionPecentage String?              @map("completion_percentage")
  status              TaskStatusEnum       @map("status")
  assginedToUserId    String               @map("assgined_to_user_id")
  assginedToUser      User                 @relation(fields: [assginedToUserId], references: [userId])
  dependencies        TaskDependenciesEnum @map("dependecies")
  milestoneIndicator  Boolean              @map("milestone_indicator")
  flag                String?              @map("flag")
  createdByUserId     String               @map("created_by_user_id")
  createdByUser       User                 @relation("createdByUser", fields: [createdByUserId], references: [userId])
  updatedByUserId     String?              @map("updated_by_user_id")
  updatedByUser       User?                @relation("updatedByUser", fields: [updatedByUserId], references: [userId])
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")

  subtasks            Task[]           @relation("parentTask")
  comments            Comments[]
  documentAttachments TaskAttachment[]

  parentTaskId String? @map("parent_task_id")
  parent       Task?   @relation("parentTask", fields: [parentTaskId], references: [taskId])

  @@index([taskId, projectId, assginedToUserId])
}

model TaskAttachment {
  attachmentId String @id @default(uuid()) @map("attachment_id")
  name         String @map("name")
  url          String @map("url")
  taskId       String @map("task_id")
  task         Task   @relation(fields: [taskId], references: [taskId], onDelete: Cascade)

  @@index([taskId])
}

model Comments {
  commentId       String   @id @default(uuid()) @map("comment_id")
  taskId          String   @map("task_id")
  commentText     String   @map("comment_text")
  commentByUserId String   @map("comment_by_user_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  task            Task     @relation(fields: [taskId], references: [taskId], onDelete: Cascade)

  commentByUser User @relation(fields: [commentByUserId], references: [userId], onDelete: Cascade)

  @@index([commentId, commentByUserId])
}
