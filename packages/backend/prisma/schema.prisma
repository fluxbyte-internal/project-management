generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRoleEnum {
  ADMINISTRATOR
  PROJECT_MANAGER
  TEAM_MEMBER
  SUPER_ADMIN
  OPERATOR
}

enum UserStatusEnum {
  ACTIVE
  INACTIVE
}

enum ProjectStatusEnum {
  NOT_STARTED
  ACTIVE
  ON_HOLD
  CLOSED
}

enum TaskStatusEnum {
  NOT_STARTED
  COMPLETED
}

enum TaskDependenciesEnum {
  BLOCKING
  WAITING_ON
}

enum OrganisationStatusEnum {
  ACTIVE
  INACTIVE
}

model User {
  userId           String             @id @default(uuid()) @map("user_id")
  email            String             @unique @map("email")
  password         String             @map("password")
  status           UserStatusEnum     @map("status")
  firstName        String?            @map("first_name")
  lastName         String?            @map("last_name")
  timezone         String?            @map("time_zone")
  country          String?            @map("country")
  avatarImg        String?            @map("avatar_img")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  userOrganisation UserOrganisation[]

  comment Comments[]

  @@unique([email, password])
  @@index([userId, email])
}

model Organisation {
  organisationId       String                 @id @default(uuid()) @map("organisation_id")
  organisationName     String                 @map("organisation_name")
  industry             String                 @map("industry")
  status               OrganisationStatusEnum @map("status")
  country              String                 @map("country")
  listOfNonWorkingDays Int                    @map("list_of_non_working_days")
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  userOrganisation     UserOrganisation[]
  tenantId             String?                @map("tenant_id")
  createdBy            String                 @map("created_by")

  projects Project[]

  @@unique([organisationName, industry, createdBy])
  @@index([organisationId, tenantId])
}

model Tenant {
  tenantId         String   @id @default(uuid()) @map("tenant_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  // organisations    Organisation[]
  connectionString String?  @map("connection_string") // prisma connn url middleware by OrgId

  @@index([tenantId])
}

model UserOrganisation {
  userOrganisationId String       @id @default(uuid()) @map("user_organisation_id")
  userId             String       @map("user_id")
  organisationId     String       @map("organisation_id")
  role               UserRoleEnum @map("role")
  jobTitle           String?      @map("job_title")
  taskColour         String?      @map("task_colour")
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")

  organisation Organisation? @relation(fields: [organisationId], references: [organisationId])
  user         User?         @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, organisationId])
  @@index([userId, organisationId, role])
}

model Project {
  projectId             String            @id @unique @default(uuid()) @map("project_id")
  organisationId        String            @map("organisation_id")
  projectName           String            @map("project_name")
  projectDescription    String?           @map("project_description")
  startDate             DateTime          @map("start_date")
  estimatedEndDate      DateTime?         @map("estimated_end_date")
  actualEndDate         DateTime?         @map("actual_end_date")
  status                ProjectStatusEnum @default(NOT_STARTED) @map("status")
  timeTrack             String?           @map("time_track")
  budgetTrack           String?           @map("budget_track")
  estimatedBudget       String?           @map("estimated_budget")
  actualCost            String?           @map("actual_cost")
  progressionPercentage String?           @map("progression_percentage")
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")

  tasks        Task[]
  organisation Organisation @relation(fields: [organisationId], references: [organisationId])

  @@index([projectId, organisationId])
}

model Task {
  taskId              String               @id @default(uuid()) @map("task_id")
  projectId           String               @map("project_id")
  taskName            String               @map("task_name")
  taskDescription     String?              @map("task_description")
  startDate           DateTime             @map("start_date")
  endDate             DateTime             @map("end_date")
  duration            String               @map("duration")
  completionPecentage String?              @map("completion_percentage")
  status              TaskStatusEnum       @map("status")
  assignee            String               @map("assignee")
  documentAttachments String?              @map("document_attachments")
  dependencies        TaskDependenciesEnum @map("dependecies")
  milestoneIndicator  Boolean              @map("milestone_indicator")
  flag                String?              @map("flag")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")

  project  Project    @relation(fields: [projectId], references: [projectId])
  comments Comments[]

  parentTaskId String? @map("parent_task_id")
  parent       Task?   @relation("parentTask", fields: [parentTaskId], references: [taskId])
  subtasks     Task[]  @relation("parentTask")

  @@index([taskId, projectId, assignee])
}

model History {
  historyId         String   @id @default(uuid()) @map("history_id")
  historyRefrenceId String   @map("history_reference_id")
  historyType       String   @map("history_type")
  historyData       Json     @map("history_data")
  historyCreatedBy  String   @map("history_created_by")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([historyId, historyRefrenceId, historyCreatedBy])
}

model Comments {
  commentId       String   @id @default(uuid()) @map("comment_id")
  taskId          String   @map("task_id")
  commentText     String   @map("comment_text")
  commentByUserId String   @map("comment_by_user_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  task            Task     @relation(fields: [taskId], references: [taskId])

  user User @relation(fields: [commentByUserId], references: [userId])

  @@index([commentId, commentByUserId])
}